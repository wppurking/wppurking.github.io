<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Wyatt`s Blog</title>
    <description>Wyatt`s Blog 工作,生活的记录
</description>
    <link>http://wppurking.github.io/</link>
    <atom:link href="http://wppurking.github.io/feed.xml" rel="self" type="application/rss+xml"/>
    <pubDate>Sat, 07 Nov 2015 17:17:42 +0800</pubDate>
    <lastBuildDate>Sat, 07 Nov 2015 17:17:42 +0800</lastBuildDate>
    <generator>Jekyll v3.0.0</generator>
    
      <item>
        <title>使用 ocserv-docker 享受自由网络</title>
        <description>&lt;h1 id=&quot;section&quot;&gt;起因和问题&lt;/h1&gt;
&lt;p&gt;在家的时候, 为了能够看到 twitter, youtube 等国外网站, 我会购买一个商业的 VPN 或者科学上网的服务来解决自己的问题, 虽然有一点点不适应我自己的所有需求, 但总该能解决我绝大部分问题. 在公司的时候, 为公司建立了通过 SSL 通道来进行科学上网, 业务部门都只需要网页加特定翻墙的问题也可以完美解决. 让我折腾出 ocserv-docker 的原因是因为:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;我不想又经历一次 “十八大” 让我原来的 hosts 方案失效后的无奈&lt;/li&gt;
  &lt;li&gt;给公司再提供一个备用的科学上网的方案&lt;/li&gt;
  &lt;li&gt;顺便将我现在手机端科学上网的体验更加流畅&lt;/li&gt;
  &lt;li&gt;能够让我自己与我老婆以及朋友等等各种各样的手持设备上能方便科学上网&lt;/li&gt;
  &lt;li&gt;能够让拥有自己服务器的我那些朋友们, 能极度方便搭建自己的科学上网&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;所以在寻找, 探索, 尝试, 学习过后, 有了现在这样一个使用 &lt;a href=&quot;https://docker.com/&quot; title=&quot;Docker Inc.&quot;&gt;docker&lt;/a&gt; 来部署 &lt;a href=&quot;http://www.infradead.org/ocserv/&quot; title=&quot;OpenConnect VPN Server&quot;&gt;ocserv&lt;/a&gt; 的科学上网方案.&lt;/p&gt;

&lt;h4 id=&quot;section-1&quot;&gt;他带来的特点是&lt;/h4&gt;

&lt;ol&gt;
  &lt;li&gt;&lt;a href=&quot;http://www.infradead.org/ocserv/&quot; title=&quot;OpenConnect VPN Server&quot;&gt;ocserv&lt;/a&gt; 相对 OpenVPN 来说其拥有较强稳定, 不会轻易被封. 因为其使用 Cisco AnyConnect 的协议, 有很多大型商业公司用着.&lt;/li&gt;
  &lt;li&gt;Android, iOS, Mac OS, Windows 都有 Cisco 所提供的 AnyConnect 的客户端, 天然全平台支持啊, &lt;strong&gt;并且 iOS 无需越狱, Android 无需 Root&lt;/strong&gt;.&lt;/li&gt;
  &lt;li&gt;完美的自动重链, 手机上开启后就可不管了&lt;/li&gt;
  &lt;li&gt;可服务器分发路由, 客户端啥都不用做就可选择性翻墙&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://docker.com/&quot; title=&quot;Docker Inc.&quot;&gt;docker&lt;/a&gt; 给部署 &lt;a href=&quot;http://www.infradead.org/ocserv/&quot; title=&quot;OpenConnect VPN Server&quot;&gt;ocserv&lt;/a&gt; 带来了 “Step1: 安装 docker; Step2: docker run; Step3: 客户端链接使用” 的极简单部署.&lt;/li&gt;
&lt;/ol&gt;

&lt;h1 id=&quot;about-ocserv-dockergithub&quot;&gt;About &lt;a href=&quot;https://github.com/wppurking/ocserv-docker&quot; title=&quot;GitHub ocserv-docker&quot;&gt;ocserv-docker&lt;/a&gt;&lt;/h1&gt;
&lt;p&gt;寻找到 ocserv 这个项目其实挺偶然的, 最初是从 twitter 上看到 AnyConnect 这个词, 然后顺藤摸瓜到 &lt;a href=&quot;http://www.infradead.org/ocserv/&quot; title=&quot;OpenConnect VPN Server&quot;&gt;ocserv&lt;/a&gt; 这个开源实现. 第一次部署一个 ocserv 给自己使用的时候那是相当的痛苦, 从下载源代码编译, 到生成自用的证书, 到生成账户密码, 到寻找如何自动重连, 一个一个的坑摆在面前. 当我把这些弄完之后, 发现整个安装步骤如果使用 docker 来组织一个 image 然后直接从 Docker Hub 上下载部署该是多么方便. 也正是因为那段时间刚刚将公司的抓取服务器上的项目全部从全脚本安装迁移为 docker + sshkit 管理, 对 docker 有了一点熟悉才决定这么干.&lt;/p&gt;

&lt;p&gt;因为 ocserv-docker 是使用 docker 进行部署的, 所以安装步骤就如 &lt;a href=&quot;https://github.com/wppurking/ocserv-docker&quot; title=&quot;GitHub ocserv-docker&quot;&gt;ocserv-docker 在 GitHub&lt;/a&gt; 中 README 所描述的那样, 保证联网 Copy-Paste 三行代码执行就完成了, 下面说对一些特殊点的设计的想法介绍一下.&lt;/p&gt;

&lt;h2 id=&quot;section-2&quot;&gt;证书, 密钥&lt;/h2&gt;
&lt;p&gt;第一次折腾 ocserv 所需要的证书, 密钥的时候感觉好麻烦, 好繁琐, 但是当你自己从源代码编译部署过 5/6 次后, 其实也就基本上理解了. 在 &lt;a href=&quot;https://registry.hub.docker.com/u/wppurking/ocserv/&quot; title=&quot;Docker ocserv&quot;&gt;ocserv-docker&lt;/a&gt; 中, 为了让第一次使用他的人不用被这繁杂的东西所烦恼所以只留下一个入口, 那就是 &lt;code&gt;./certs/&lt;/code&gt; 中的两个 tmp 文件, 修改好你想要修改的基础信息(或者保持不变), 最终会使用这两个模板文件, 在 image 中的 &lt;code&gt;/opt/certs&lt;/code&gt; 目录中存放生成好的 certs 文件, 一个 &lt;code&gt;ca-key.pem&lt;/code&gt; 一个 &lt;code&gt;server-key.pem&lt;/code&gt;. 单独将 certs 文件放出来的原因是, 可以在运行 images 通过 volumn 重新挂载这个位置将自己的新的 certs 文件应用上去, 如果没有自己的 certs 文件, 那么就无需关心了.&lt;/p&gt;

&lt;h2 id=&quot;section-3&quot;&gt;用户名, 密码&lt;/h2&gt;
&lt;p&gt;其实我也知道将密码存在代码中不好, 也可以将其优化成为每一次 build 都自动生成一个新密码, 或者完全将密码文件取消. 选择将初始化两个账户, 并且使用简单密码的原因在于两个:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;对新用户而言, 我不想他们在第一次使用 ocserv 的时候, 还要先去了解下 &lt;code&gt;ocpasswd&lt;/code&gt; 命令怎么用, 先给他们一个默认账户密码可以直接使用为好.&lt;/li&gt;
  &lt;li&gt;对于我自己的需求而言, 我会部署好多个, hk/jp/us/sg 都会有服务器, 我不想每个服务器都去设置一下用户密码.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;所以对账号密码有特别安全要求的, 那么自己了解我一下 &lt;code&gt;ocpasswd&lt;/code&gt; 命令, 然后编辑一下 &lt;code&gt;./ocserv/ocpasswd&lt;/code&gt; 即可完成自己的定制.&lt;/p&gt;

&lt;h2 id=&quot;section-4&quot;&gt;自动分发的路由&lt;/h2&gt;
&lt;p&gt;这一块是我现在的短板, 我是直接借用了 &lt;a href=&quot;https://gist.github.com/kevinzhow/9661732&quot;&gt;kevinzhow/route.sh&lt;/a&gt;, 因为自己还不知道如何去寻找这样的国外的顶级 IP, 所以我偷了点懒, 直接使用了他人弄好的, 只是会在自己的使用过程中碰到新的 IP 进行一点补充.&lt;/p&gt;

&lt;p&gt;因为 ocserv 对自动分发的路由数量有限制(具体数量忘了, 大概是 30~50 条之间), 所以想要完美的解决国内国外翻墙是比较困难的, 但囊括大多数的国外的子网掩码为 255.0.0.0 的 IP 应该还是可以解决很多问题的, 这也算这个方案的一点点缺陷, 好在这个影响现在对我不明显, 基本上没有~&lt;/p&gt;

&lt;h1 id=&quot;ps&quot;&gt;PS&lt;/h1&gt;
&lt;p&gt;因为最近将自己的 Blog 从 octopress 更换为 Jekyll, 所以原本集成的 Disqus 插件没了, 需要花点时间处理一下. 在这之前, 有啥问题就直接 twitter: @wyatt_pan 吧&lt;/p&gt;

&lt;p&gt;请&lt;a href=&quot;https://gist.github.com/wppurking/55db8651a88425e0f977&quot;&gt;安装 Docker 1.0+&lt;/a&gt; 并且操作系统所使用的 Linux Kernal 在 3.8+  如果无法选择, 那么请使用 Ubuntu 14.04 LTS 的 OS&lt;/p&gt;

&lt;p&gt;对于什么是 ocserv 或者什么是 AnyConnect 这样的问题就交给 &lt;a href=&quot;http://www.baidu.com/s?ie=utf-8&amp;amp;f=8&amp;amp;rsv_bp=1&amp;amp;tn=baiduhome_pg&amp;amp;wd=anyconnect%20ocserv&amp;amp;rsv_spt=1&amp;amp;rsv_enter=1&amp;amp;rsv_sug3=9&amp;amp;rsv_sug2=0&amp;amp;inputT=1331&quot;&gt;度娘&lt;/a&gt; 和 &lt;a href=&quot;https://www.google.com/#newwindow=1&amp;amp;hl=en&amp;amp;qscrl=1&amp;amp;q=what+is+anyconnect&quot;&gt;谷哥&lt;/a&gt; 吧 :P&lt;/p&gt;

</description>
        <pubDate>Sat, 11 Oct 2014 19:42:44 +0800</pubDate>
        <link>http://wppurking.github.io/2014/10/11/use-ocserv-docker-to-enjoy-freedom-internet.html</link>
        <guid isPermaLink="true">http://wppurking.github.io/2014/10/11/use-ocserv-docker-to-enjoy-freedom-internet.html</guid>
        
        <category>ocserv docker anyconnect</category>
        
        
      </item>
    
      <item>
        <title>Welcome to Jekyll!</title>
        <description>&lt;p&gt;You’ll find this post in your &lt;code&gt;_posts&lt;/code&gt; directory. Go ahead and edit it and re-build the site to see your changes. You can rebuild the site in many different ways, but the most common way is to run &lt;code&gt;jekyll serve&lt;/code&gt;, which launches a web server and auto-regenerates your site when a file is updated.&lt;/p&gt;

&lt;p&gt;To add new posts, simply add a file in the &lt;code&gt;_posts&lt;/code&gt; directory that follows the convention &lt;code&gt;YYYY-MM-DD-name-of-post.ext&lt;/code&gt; and includes the necessary front matter. Take a look at the source for this post to get an idea about how it works.&lt;/p&gt;

&lt;p&gt;Jekyll also offers powerful support for code snippets:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;print_hi&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;nb&quot;&gt;puts&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;Hi, &lt;/span&gt;&lt;span class=&quot;si&quot;&gt;#{&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;print_hi&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&#39;Tom&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;#=&amp;gt; prints &#39;Hi, Tom&#39; to STDOUT.&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Check out the &lt;a href=&quot;http://jekyllrb.com/docs/home&quot;&gt;Jekyll docs&lt;/a&gt; for more info on how to get the most out of Jekyll. File all bugs/feature requests at &lt;a href=&quot;https://github.com/jekyll/jekyll&quot;&gt;Jekyll’s GitHub repo&lt;/a&gt;. If you have questions, you can ask them on &lt;a href=&quot;https://talk.jekyllrb.com/&quot;&gt;Jekyll Talk&lt;/a&gt;.&lt;/p&gt;

&lt;h3 id=&quot;octopress---jekyll&quot;&gt;Octopress 官方老是不放出更新, 所以我切换使用原生 Jekyll&lt;/h3&gt;

</description>
        <pubDate>Fri, 08 Aug 2014 19:10:58 +0800</pubDate>
        <link>http://wppurking.github.io/jekyll/update/2014/08/08/welcome-to-jekyll.html</link>
        <guid isPermaLink="true">http://wppurking.github.io/jekyll/update/2014/08/08/welcome-to-jekyll.html</guid>
        
        
        <category>jekyll</category>
        
        <category>update</category>
        
      </item>
    
      <item>
        <title>网页 字符 编码</title>
        <description>&lt;h2 id=&quot;section&quot;&gt;起因&lt;/h2&gt;
&lt;p&gt;在编写互联网应用的时候, 特别是在处理不同国家的语言的时候, 很大几率会碰到编码的问题. 如果稍不注意, 通过 API 存入 DB 或者提交给别人网站的信息就讲变为乱码, 为了彻底解决这个问题, 所以详细了解了一下计算机中的各国文字等是如何弄出来的.&lt;/p&gt;

&lt;h2 id=&quot;section-1&quot;&gt;基础知识&lt;/h2&gt;
&lt;p&gt;说是基础知识, 是因为这些知识给人的感觉就好像是不用解释, 就是这样的一样, 其实我也解释不上来 - -||&lt;/p&gt;

&lt;p&gt;首先需要统一的观点是:  &lt;em&gt;计算机中的存储, 无论是在哪一个组件里面, 它最终的归宿都是二进制&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;无论是我们操作的内存, 存储数据的硬盘, 或者网络上传输的内容都是二进制, 最核心的 CPU 到现在也仅仅能处理二进制流 (当然, 如果你要问问什么不能是三进制或者十进制, 这个问题参考&lt;a href=&quot;http://www.zhihu.com/question/19846988&quot;&gt;知乎&lt;/a&gt;吧.&lt;/p&gt;

&lt;h2 id=&quot;ascii-&quot;&gt;不得不说的 ASCII 码&lt;/h2&gt;
&lt;p&gt;因为计算机的所有内容都是二进制存储的, 所以很明显的一点就是 “没有人可以像 CPU 一样读二进制啊”, 所有就有一个组织向 teleprinter encoding systems 学习(可以理解为莫斯密码那样的东西), 使用 8 个二进制对 26 个英文字母, 10 个数字和 20 几个特殊字符制作了一个可以互相对应查找的码表
&lt;img src=&quot;http://wyatt.qiniudn.com/ascii.png&quot; alt=&quot;ASCII 码表&quot; title=&quot;ASCII 码表&quot; /&gt;&lt;/p&gt;

&lt;p&gt;我们把通过码表所表达出来的映射规则称为 &lt;em&gt;“编码(encoding)”&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;我们把这个码表的编码(encoding)称为 &lt;em&gt;ASCII 编码 (encoding)&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;我们把 a,b,c 这样的字符通过 ASCII 码表转换为 8 位二进制数这样的一个过程称为: 使用 ASCII 编码(encoding)进行 &lt;em&gt;“编码(encode)”&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;我们把将 8 位二进制数通过 ASCII 码表解析成字母的这个过程称为: 使用 ASCII 编码(encoding) 进行 &lt;em&gt;“解码(decode)”&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;我们说字母 a 的 ASCII 码是 0110 0001, 十六进制是 61, 十进制是 97&lt;/p&gt;

&lt;p&gt;由于中文的博大精深, 使用一个 “编码” 就涵盖了一个名词和一个动词, 但在理解的时候还是要区分开了.&lt;/p&gt;

&lt;p&gt;我不知道 ASCII 编码时不时计算机上的第一个编码, 但在我映像里面应该是第一批编码. 随着计算机从美国慢慢发展到全球不同的地方, 肯定是没有办法使用一个 ASCII 来表示所有的文字的, 例如中国字就没办法使用 ASCII 编码(encoding) 的规则来完成, 因为按照其规则最多边编码(encode) 2^8 = 256  个字符. 所以各个国家开始自己弄自己的一套编码(encoding), 出现了 GBK/GBK2312, BIG5 等等..&lt;/p&gt;

&lt;p&gt;为了解决不同编码(encoding)各自为政的情况, 出现了一个名为 Unicode 的编码(encoding), 可能还会看到诸如 UCS-2, UCS-4 这样的名称, 这是因为不仅仅只有一个组织想解决这个问题, UCS 全称为 Universal Character Set, 这个是由 ISO 组织主导的, 但是随着这个时代的发展, 这两个组织意识到世界上没必要存在两种不同的编码来做同样的事情, 所以从 Unicode 2.0 开始两者开始合并双方的成果.&lt;/p&gt;

&lt;h2 id=&quot;section-2&quot;&gt;乱码的问题&lt;/h2&gt;
&lt;p&gt;如果世界上大家都使用 Unicode 编码(encoding) 那么就不会存在乱码的问题了, 可现实却使很残酷的… 所以我们在不同语言的网站之间处理数据就很可能碰到编码的乱码的问题. 而乱码问题的发生则是在解码的时候所使用的编码(encoding) 并不是产生所存储的那些二进制时使用的编码(encoding).&lt;/p&gt;

&lt;p&gt;那我们来看看几个实际问题的情况:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;通过 Java 代码读取本地文件的内容显示的是乱码.&lt;/li&gt;
  &lt;li&gt;抓取一个含有中文字内容的网站回来是乱码.&lt;/li&gt;
  &lt;li&gt;通过 API 提交含有中文字内容的信息给一个美国网站, 信息是乱码.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;这些问题发生的本质原因都是编码(encode)时使用的编码(encoding)与解码时所使用的编码(encoding)不一样导致的.&lt;/p&gt;

&lt;p&gt;当我们编写好的代码在处理文本内容的时候, 是一定会经过解码这个过程的, 一定会需要将存储在计算机中的二进制数据解码为字符, 而解码一定需要一个编码(encoding), 所以回想一下当你涉及到需要读取或者操作一个文件或者一串字符串或者一个页面的内容的时候, 一定会有一个地方携带者编码(encoding)这个 metadata.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;在通过 HTTP 协议从网站返回结果的时候会有 &lt;code&gt;Content-Type: text/html; charset=UTF-8&lt;/code&gt; 告诉你返回的内容的编码.&lt;/li&gt;
  &lt;li&gt;在读取文件系统的文件的时候, 这个文件会拥有一个自己的编码(encoding).&lt;/li&gt;
  &lt;li&gt;对于 JVM 或者 Ruby VM 这样的 VM 来说, 会有一个 VM 级别的编码(encoding)设置.&lt;/li&gt;
  &lt;li&gt;对于操作系统来说, 也会有一个 LANG=en_US.UTF-8 指定语言与编码(encoding).&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;然后从最上层开始, 如果没有找到 encoding 信息, 则会一层一层向下寻找, 直到最终找到操作系统所使用的编码(encoding) 作为一个默认编码.  以 Ruby 为例: “通过 Ruby 代码编写抓取某中文网站的内容返回了 HTML 内容, 可是没有告诉你 charset 是什么, 那么这个时候 Ruby VM 会使用 External encoding 来解析这些二进制数据, 如果没有 External encoding 则选择使用 Default External encoding, 而 Default External encoding 使用的是 Locale encoding, 而 Ruby VM 中的 Locale encoding 则是 Ruby VM 所在的操作系统的本地编码”.&lt;/p&gt;

&lt;p&gt;所以, 如果想尽可能避免碰到乱码的问题, 那么一个是让自己使用 UTF-8 这样的统一编码, 一个是在编写程序的时候, 自己要能够从某些地方获取或者猜测到正确的编码, 否则就很容易出现乱码的情况. 同时在处理并理清含有乱码这样的问题的时候一定要理解清楚 “encoding”, “encode”, “decode” 以及 “二进制” 与 “字符串”&lt;/p&gt;

&lt;p&gt;PS: 如果对计算机是如何处理编码还有一点点疑惑, 可以参看 &lt;a href=&quot;http://www.ibm.com/developerworks/cn/java/j-lo-chinesecoding/&quot;&gt;深入分析 Java 中的中文编码问题&lt;/a&gt; 中关于 “按照 XXX 编码” 的部分来理解.&lt;/p&gt;
</description>
        <pubDate>Wed, 01 Jan 2014 23:12:00 +0800</pubDate>
        <link>http://wppurking.github.io/2014/01/01/wang-ye-zi-fu-bian-ma.html</link>
        <guid isPermaLink="true">http://wppurking.github.io/2014/01/01/wang-ye-zi-fu-bian-ma.html</guid>
        
        
      </item>
    
      <item>
        <title>Mac OS hibernatemode and Chrome Notification Timeout</title>
        <description>&lt;h3 id=&quot;section&quot;&gt;起因和问题&lt;/h3&gt;
&lt;p&gt;最近将 MacBook Air 从原来的 10.7 升级到了 10.8 (没有升级 10.9 是因为太新有些工具不兼容), 然后就碰到类似 &lt;a href=&quot;http://blog.csdn.net/cneducation/article/details/8293224&quot;&gt;“Mountain Lion 关机速度慢”&lt;/a&gt;, &lt;a href=&quot;http://www.mobileai.tw/2012/09/20/mac-osx-ssd-optimization/&quot;&gt;“Mountain Lion 休眠速度慢”&lt;/a&gt; 这样的问题困扰, 其实这些问题都挺好解决的, 是一些配置问题, 只是修改这些配置的地方没有那么友好. 不过我在修改了&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://wyatt.qiniudn.com/pmset.png&quot; alt=&quot;pmset -g live&quot; title=&quot;pmset -g live&quot; /&gt;&lt;/p&gt;

&lt;p&gt;hibernatemode 为 0 之后, 发现休眠的速度仍然很慢, 按道理来说应该不再将数据向硬盘上写了, 应该不会有那么慢的休眠速度的啊, 仔细检查了一下休眠发现:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;点击左上角苹果图标后点击 Sleep,  苹果背后灯会亮着直到成功休眠, 屏幕会亮着鼠标加黑色背景直到成功休眠.&lt;/li&gt;
  &lt;li&gt;盖上盖子, 苹果背后的灯会灭, 并且显示器会黑, 但在 10s 内打开盖子发现还在休眠中… 屏幕会亮着鼠标加黑色背景, 直到成功休眠后才关闭.&lt;/li&gt;
&lt;/ol&gt;

&lt;h3 id=&quot;section-1&quot;&gt;寻找问题&lt;/h3&gt;
&lt;p&gt;发现这个情况我就很奇怪了, 这是咋回事? 怎么修改了 &lt;code&gt;hibernatemode 0&lt;/code&gt; 不起作用吗? 然后我尝试重启电脑后休眠一次, 发现这次很快就休眠过去了. 然够根据这个现象我一时无解了, 我想通过查查 log 信息看看? 可这休眠的 log 哪里找? 我知道 Mac 下有一个 Console 应用能够看到整个系统的 log 但我不知道哪个 log 和这个问题相关啊. 然后我就 &lt;code&gt;man pmset&lt;/code&gt; 查看设置 &lt;code&gt;hibernatemode&lt;/code&gt; 的命令, 通过 &lt;code&gt;pmset -g log&lt;/code&gt; 找到了如下的内容&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://wyatt.qiniudn.com/pmset_log.png&quot; alt=&quot;pmset -g log&quot; /&gt;&lt;/p&gt;

&lt;p&gt;发现问题了! 当出发系统的 Sleep 后, Kernel 在等 Chrome 一直等到超时. 上网找了一会, 发现 &lt;a href=&quot;http://forums.macrumors.com/showthread.php?t=1649152&quot;&gt;Sleep delay on MBA 2013 after Chrome update&lt;/a&gt; 和 &lt;a href=&quot;https://code.google.com/p/chromium/issues/detail?id=132336#c61&quot;&gt;chromium issues 讨论列表&lt;/a&gt;  &lt;a href=&quot;https://codereview.chromium.org/25954005/&quot;&gt;Issue 25954005&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;原来这是从 2013.6.12 就被报告出来的一个 bug, 到 2013.10.8 解决.&lt;/p&gt;

&lt;h3 id=&quot;section-2&quot;&gt;结论&lt;/h3&gt;
&lt;p&gt;这个是 Chrome 本身的问题, 看来在 Chrome 再次更新前 (现在版本为 30.0.1599.101) 我还是先关闭 Chrome 然后再休眠吧.  如果是盖盖子休眠的话, 其实还真感觉不出来.&lt;/p&gt;

&lt;table&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;PS: 我是开着盖子连着外显, 所以休眠时看到屏幕一直黑着有鼠标不关不爽 - -&lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;PPS: 日志内容可能是 “PM notification timeout..” 也可能是 “Response from Google Chrome…” 不过都是有 30s 的 timeout 时间.&lt;/p&gt;
</description>
        <pubDate>Sun, 03 Nov 2013 13:08:00 +0800</pubDate>
        <link>http://wppurking.github.io/mountain/lion/chrome/hibernatemode/2013/11/03/mac-os-hibernatemode-and-chrome-notification-timeout.html</link>
        <guid isPermaLink="true">http://wppurking.github.io/mountain/lion/chrome/hibernatemode/2013/11/03/mac-os-hibernatemode-and-chrome-notification-timeout.html</guid>
        
        
        <category>mountain</category>
        
        <category>lion</category>
        
        <category>Chrome</category>
        
        <category>hibernatemode</category>
        
      </item>
    
      <item>
        <title>wrap_parameters 初识</title>
        <description>&lt;h2 id=&quot;section&quot;&gt;问题&lt;/h2&gt;
&lt;p&gt;最近在使用 angularjs 与 rails 练习一个 Todolist 的例子程序, 在利用 angularjs 的 resources 模块创建一个前端的 Resource Model 向 Rails 提交创建请求的时候, 发生了个奇怪的问题.&lt;/p&gt;

&lt;p&gt;“前端代码 POST 一个 {title: ‘aaa’} 的数据给后端 TodoController, 竟然拿到 {title: ‘aaa’, todo: {title: ‘aaa’}} 这样的 params”, 我惊讶了, 我说, 这到底是哪里进行了处理? 是 http 协议处理的还是 rails 自己添加了一个 &lt;code&gt;todo&lt;/code&gt; 的 params ?&lt;/p&gt;

&lt;h2 id=&quot;section-1&quot;&gt;寻找&lt;/h2&gt;
&lt;p&gt;看到这个问题我满脑子的疑问, 这个 &lt;code&gt;todo: {title: &#39;aaa&#39;}&lt;/code&gt; 参数到底是哪里来的? 我先查看了我向后端提交的参数, 通过 Chrome 查看如下&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span class=&quot;c&quot;&gt;# HTTP header&lt;/span&gt;
POST /todoitems HTTP/1.1
Host: localhost:3000
Connection: keep-alive
Content-Length: 35
Accept: application/json, text/plain, &lt;span class=&quot;k&quot;&gt;*&lt;/span&gt;/&lt;span class=&quot;k&quot;&gt;*&lt;/span&gt;
Origin: http://localhost:3000
X-Requested-With: XMLHttpRequest
User-Agent: Mozilla/5.0 &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;Macintosh; Intel Mac OS X 10_7_5&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; AppleWebKit/537.36 &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;KHTML, like Gecko&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; Chrome/29.0.1547.65 Safari/537.36
Content-Type: application/json;charset&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;UTF-8
DNT: 1
Referer: http://localhost:3000/
Accept-Encoding: gzip,deflate,sdch
Accept-Language: en-US,en;q&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;0.8

&lt;span class=&quot;c&quot;&gt;# Request Payload &lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;title&quot;&lt;/span&gt;:&lt;span class=&quot;s2&quot;&gt;&quot;123&quot;&lt;/span&gt;,&lt;span class=&quot;s2&quot;&gt;&quot;is_complete&quot;&lt;/span&gt;:false&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;c&quot;&gt;# Response Header&lt;/span&gt;
HTTP/1.1 200 OK
X-Frame-Options: SAMEORIGIN
X-XSS-Protection: 1; &lt;span class=&quot;nv&quot;&gt;mode&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;block
X-Content-Type-Options: nosniff
X-UA-Compatible: &lt;span class=&quot;nv&quot;&gt;chrome&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;1
Content-Type: application/json; &lt;span class=&quot;nv&quot;&gt;charset&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;utf-8
ETag: &lt;span class=&quot;s2&quot;&gt;&quot;419adbd54153d295384cda2ea472df60&quot;&lt;/span&gt;
Cache-Control: max-age&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;0, private, must-revalidate
X-Request-Id: 24ab1689-4d8e-40fc-b5f3-b8cd792166c1
X-Runtime: 503.361373
Connection: close
Server: thin 1.5.1 codename Straight Razor&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;我发现了一个奇怪的地方, 原本 Post 用来传输数据的 &lt;code&gt;Request Body&lt;/code&gt; 被替换为了 &lt;code&gt;Request Payload&lt;/code&gt;, 这个 Payload 是什么东西啊? 通过 Google 寻找了半天, 无论是 &lt;a href=&quot;http://en.wikipedia.org/wiki/Payload_(computing\)&quot;&gt;wiki&lt;/a&gt; 还是 &lt;a href=&quot;http://stackoverflow.com/questions/5905916/payloads-of-http-request-methods&quot;&gt;stackoverflow&lt;/a&gt; 都感觉不解决疑惑, 直到找到&lt;a href=&quot;http://tools.ietf.org/html/draft-ietf-httpbis-p3-payload-19#section-3&quot;&gt;这个 RFC 草案&lt;/a&gt; 才有点解惑.&lt;/p&gt;

&lt;h3 id=&quot;payload&quot;&gt;Payload&lt;/h3&gt;
&lt;p&gt;我暂时还无法给 Payload 是什么下定义, 不过我把它理解为传递的一部分信息, 而这类信息在 HTTP 协议中被推荐包含在 request header 或者 request body 中(如果有的话).&lt;/p&gt;

&lt;p&gt;了解了什么是 Payload 可是还没有解决为什么在 Rails 后端中突然多出来一个 &lt;code&gt;{todo: {title: &#39;aaa&#39;}}&lt;/code&gt; 这样的参数. 当我排除浏览器, 直接通过命令行输入&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;curl -X POST -H &lt;span class=&quot;s2&quot;&gt;&quot;Content-Type: application/json;charset=UTF-8&quot;&lt;/span&gt; -H &lt;span class=&quot;s2&quot;&gt;&quot;X-Requested-With: XMLHttpRequest&quot;&lt;/span&gt; localhost:3000/todoitems -d &lt;span class=&quot;s1&quot;&gt;&#39;{&quot;title&quot;:&quot;sdf&quot;,&quot;is_complete&quot;:false}&#39;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;并且在后端得到&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-javascript&quot; data-lang=&quot;javascript&quot;&gt;&lt;span class=&quot;s2&quot;&gt;&quot;{title: &#39;sdf&#39;, is_complete: false, todoitem: {title: &#39;sdf&#39;, is_complete: false}}&quot;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;这样的结果时, 我确定! 这一定是 Rails 在某个地方对 params 进行了处理, 并且判断的标准一定与 &lt;code&gt;Content-Type:application/json&lt;/code&gt; 有关.&lt;/p&gt;

&lt;h3 id=&quot;section-2&quot;&gt;运气呀&lt;/h3&gt;
&lt;p&gt;可我不知道去翻看那一部分 Rails 代码, 于是乎上 &lt;a href=&quot;https://github.com/rails/rails/search?p=1&amp;amp;q=params&amp;amp;ref=cmdform&quot;&gt;github 搜索一下&lt;/a&gt;, 可是通过 &lt;code&gt;params&lt;/code&gt; 这个关键字在 Rails 项目中搜索出来的内容太多了, 而且大多数与我的问题一点关系也没有. 然后我冥冥中打开 RubyMine , 然后通过 &lt;code&gt;class name search&lt;/code&gt; 功能进行类名搜索, 也是 params 关键字不过这回找到了两个类 &lt;code&gt;ActionDispatch::ParamsParser&lt;/code&gt; 和 &lt;code&gt;ActionController::ParamsWrapper&lt;/code&gt; 而当我看完这两份代码的时候发现, 原来就是这里进行了处理!  感叹, 找到这里真的是有蛮巧合的.&lt;/p&gt;

&lt;p&gt;这一切的秘密就在 &lt;a href=&quot;https://github.com/rails/rails/blob/master/actionpack/lib/action_controller/metal/params_wrapper.rb&quot;&gt;params_wrapper.rb&lt;/a&gt; 和 &lt;a href=&quot;https://github.com/rails/rails/blob/2214237c3950445208635a332d520d6aa530c1de/guides/code/getting_started/config/initializers/wrap_parameters.rb&quot;&gt;initializers/wrap_parameters.rb&lt;/a&gt; 这两个文件.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span class=&quot;c1&quot;&gt;# Performs parameters wrapping upon the request. Will be called automatically&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;# by the metal call stack.&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;process_action&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;args&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;_wrapper_enabled?&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;# 这里从 request.request_parameters 结合 wrap_parameters api 设置的参数, &lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;# 将传递上来的 hash params 包装成为一个独立的 hash -&amp;gt; wrapped_hash&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;wrapped_hash&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;_wrap_parameters&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;request&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;request_parameters&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;# 对其他的基础 params 进行处理, 过滤掉 wrapped_keys 之外的 params&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;wrapped_keys&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;request&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;request_parameters&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;keys&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;wrapped_filtered_hash&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;_wrap_parameters&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;request&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;filtered_parameters&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;slice&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;wrapped_keys&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

    &lt;span class=&quot;c1&quot;&gt;# 最后将这些 params 合并到 request 的 params 中去.&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;# This will make the wrapped hash accessible from controller and view&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;request&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;parameters&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;merge!&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;wrapped_hash&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;request&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;request_parameters&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;merge!&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;wrapped_hash&lt;/span&gt;

    &lt;span class=&quot;c1&quot;&gt;# This will make the wrapped hash displayed in the log file&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;request&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;filtered_parameters&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;merge!&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;wrapped_filtered_hash&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;super&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;代码跟踪到这里问题我的疑问已经解决了, 在 &lt;a href=&quot;https://github.com/railscasts/405-angularjs&quot;&gt;405-angularjs&lt;/a&gt; 项目中通过 $resource 封装 angularjs 的 rest 资源, 然后通过 &lt;code&gt;resource.save({title:&#39;xx&#39;})&lt;/code&gt; 或者 &lt;code&gt;new resource({title:&#39;xx&#39;}).$save()&lt;/code&gt; 所触发的请求, 能够在 rails 后端直接 &lt;code&gt;resource.new(params[&#39;model_name&#39;])&lt;/code&gt; 的原因也找到了.&lt;/p&gt;
</description>
        <pubDate>Sun, 22 Sep 2013 23:09:00 +0800</pubDate>
        <link>http://wppurking.github.io/rails/angularjs/payload/2013/09/22/wrap-parameters-chu-shi.html</link>
        <guid isPermaLink="true">http://wppurking.github.io/rails/angularjs/payload/2013/09/22/wrap-parameters-chu-shi.html</guid>
        
        
        <category>rails</category>
        
        <category>angularjs</category>
        
        <category>payload</category>
        
      </item>
    
      <item>
        <title>Golang 的中的 windows.go darwin.go</title>
        <description>&lt;h2 id=&quot;section&quot;&gt;起因&lt;/h2&gt;
&lt;p&gt;前几天无意中逛了一下 &lt;a href=&quot;https://github.com/ddollar?tab=repositories&quot;&gt;foreman 作者的 github&lt;/a&gt; 发现他用 Golang 重新实现了一次 foreman, 然后我就很感兴趣的打开看了看. 现在看起来这里面的代码还是挺少的, 只有 13 个文件, 大概 600+ 行的代码 (cat *.go | wc -l) , 所以就每个文件都打开详细看了看. 然后我这一看就有了这篇文章.&lt;/p&gt;

&lt;h2 id=&quot;section-1&quot;&gt;疑问&lt;/h2&gt;
&lt;p&gt;在 &lt;a href=&quot;https://github.com/ddollar/forego&quot;&gt;forego&lt;/a&gt; 中有这么几个文件: &lt;a href=&quot;https://github.com/ddollar/forego/blob/2cdf2cd7cb9bbd97f6f5591659493c026130c59e/process.go&quot;&gt;process.go&lt;/a&gt;  &lt;a href=&quot;https://github.com/ddollar/forego/blob/2cdf2cd7cb9bbd97f6f5591659493c026130c59e/darwin.go&quot;&gt;darwin.go&lt;/a&gt; &lt;a href=&quot;https://github.com/ddollar/forego/blob/2cdf2cd7cb9bbd97f6f5591659493c026130c59e/linux.go&quot;&gt;linux.go&lt;/a&gt; &lt;a href=&quot;https://github.com/ddollar/forego/blob/2cdf2cd7cb9bbd97f6f5591659493c026130c59e/windows.go&quot;&gt;windows.go&lt;/a&gt; 其中在 &lt;code&gt;process.go&lt;/code&gt; 中定义了 &lt;code&gt;type Process struct&lt;/code&gt; 用来抽象具体运行一个应用的进程, 然后在另外三个文件中都有三个相同的方法&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;相同方法&lt;/strong&gt;&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-go&quot; data-lang=&quot;go&quot;&gt;&lt;span class=&quot;k&quot;&gt;func&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;p&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Process&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Start&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;c&quot;&gt;// do something&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;

&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;func&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;p&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Process&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Signal&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;signal&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;syscall&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Signal&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;c&quot;&gt;// do something&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;

&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;func&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ShutdownProcesses&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;of&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;OutletFactory&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;c&quot;&gt;// do something&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;问题就来了, 所有的文件都是放在相同的 &lt;code&gt;package main&lt;/code&gt; 中, 难道 Golang 允许 &lt;code&gt;Process struct&lt;/code&gt; 拥有三个相同的方法存在吗? 虽然我知道 Golang 能够通过 package 让代码在逻辑上处于一个整体, 而在物理上分割为多个文件, 可当不同文件中的代码被编译器处理到一起的时候难道相同方法也会合并吗?&lt;/p&gt;

&lt;h2 id=&quot;section-2&quot;&gt;寻找&lt;/h2&gt;
&lt;p&gt;我开始在想, 是不是他将三个平台的文件写到一个项目中, 需要针对某一个平台编译的时候, 将另外两个文件先暂时挪开, 而为了方便管理将他们放在同一个 repo 中呢? 所以我把代码 clone 下来然后将依赖弄好进行编译, 我在 Mac OS 上进行编辑, 我没有处理 &lt;code&gt;windows.go&lt;/code&gt; &lt;code&gt;linux.go&lt;/code&gt; 这两个文件执行一下 &lt;code&gt;go build&lt;/code&gt; 结果是成功, 并且程序可以正常运行.&lt;/p&gt;

&lt;p&gt;我猜测是不是文件名的特性, 所以我将 &lt;code&gt;darwin.go&lt;/code&gt; 改名为 &lt;code&gt;darwin_bak.go&lt;/code&gt; 结果也是成功.&lt;/p&gt;

&lt;p&gt;接下来, 我就来验证 Golang 是不是真的可以存在多个相同方法, 看是不是会让我大吃一惊.然后就有了下面代码&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;a.go&lt;/strong&gt;&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-go&quot; data-lang=&quot;go&quot;&gt;&lt;span class=&quot;k&quot;&gt;package&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;

&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;import&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;log&quot;&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;

&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;func&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;p&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;P&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Start&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;
  &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Println&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;a.Start()&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;&lt;strong&gt;b.go&lt;/strong&gt;&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-go&quot; data-lang=&quot;go&quot;&gt;&lt;span class=&quot;k&quot;&gt;package&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;

&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;import&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;log&quot;&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;

&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;func&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;p&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;P&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Start&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;
  &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Println&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;b.Start()&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;&lt;strong&gt;main.go&lt;/strong&gt;&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-go&quot; data-lang=&quot;go&quot;&gt;&lt;span class=&quot;k&quot;&gt;package&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;

&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;import&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;log&quot;&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;

&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;type&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;  &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;P&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;k&quot;&gt;struct&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;
  &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Name&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;string&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;

&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;func&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;NewP&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;p&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;P&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;
  &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;p&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;new&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;P&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;
  &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;p&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Name&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;wyatt&quot;&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;
  &lt;/span&gt;&lt;span class=&quot;k&quot;&gt;return&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;


&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;func&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;
  &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;p&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:=&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;NewP&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;

  &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Println&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;p&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;
  &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;p&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Start&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;结果运行 go build 的结果是&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;./b.go:7: &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;*&lt;/span&gt;P&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;.Start redeclared &lt;span class=&quot;k&quot;&gt;in &lt;/span&gt;this block
	previous declaration at ./a.go:7&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;送了一口气, 还好和想象的一样. 把我难倒了, 我开始上网 Google. 在尝试了一大堆的关键字 &lt;a href=&quot;https://www.google.com/#hl=en&amp;amp;newwindow=1&amp;amp;q=windows.go&amp;amp;qscrl=1&quot;&gt;windows.go&lt;/a&gt;  &lt;a href=&quot;https://www.google.com/#hl=en&amp;amp;newwindow=1&amp;amp;q=golang+windows.go+filename&amp;amp;qscrl=1&quot;&gt;golang windows.go filename&lt;/a&gt; &lt;a href=&quot;https://www.google.com/#hl=en&amp;amp;newwindow=1&amp;amp;q=golang+darwin.go&amp;amp;qscrl=1&quot;&gt;golang darwin.go&lt;/a&gt; 最后终于在 &lt;a href=&quot;http://golang.org/pkg/go/build/&quot;&gt;go build 的文档中找到了&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&quot;section-3&quot;&gt;结论&lt;/h2&gt;

&lt;blockquote&gt;
  &lt;p&gt;If a file’s name, after stripping the extension and a possible _test suffix, matches any of the following patterns:&lt;/p&gt;

  &lt;p&gt;*_GOOS&lt;/p&gt;

  &lt;p&gt;*_GOARCH&lt;/p&gt;

  &lt;p&gt;*_GOOS_GOARCH&lt;/p&gt;

  &lt;p&gt;(example: source_windows_amd64.go) or the literals&lt;/p&gt;

  &lt;p&gt;GOOS&lt;/p&gt;

  &lt;p&gt;GOARCH&lt;/p&gt;

  &lt;p&gt;(example: windows.go) where GOOS and GOARCH represent any known operating system and architecture values respectively, then the file is considered to have an implicit build constraint requiring those terms.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;和 &lt;code&gt;go test&lt;/code&gt; 使用文件名做区分类似, 这个使用文件名区分用途的规则也被用倒了 &lt;code&gt;go build&lt;/code&gt; 上, &lt;code&gt;GOOS&lt;/code&gt; 用于代表需要目标操作系统, 例如 windows, darwin, linux. &lt;code&gt;GOARCH&lt;/code&gt; 用于代表硬件环境, 例如 386, amd64, arm. 而当文件名是以 &lt;code&gt;GOOS&lt;/code&gt; 和 &lt;code&gt;GOARCH&lt;/code&gt; 命名的时候, &lt;code&gt;go build&lt;/code&gt; 只会有针对性的加载对应平台的那份代码进行编译.&lt;/p&gt;

&lt;p&gt;原来如此, 就是 &lt;code&gt;go build&lt;/code&gt; 有这样的特性, 我又找了几个其他的 Golang 的开源项目, 除了 &lt;a href=&quot;https://github.com/ddollar/forego&quot;&gt;forego&lt;/a&gt; 外还有 &lt;a href=&quot;https://github.com/howeyc/fsnotify&quot;&gt;fsnotify&lt;/a&gt; 也是, 看来这个特性是自己孤陋寡闻了.&lt;/p&gt;

</description>
        <pubDate>Sat, 07 Sep 2013 10:42:00 +0800</pubDate>
        <link>http://wppurking.github.io/2013/09/07/golang-de-zhong-de-windows-dot-go-darwin-dot-go.html</link>
        <guid isPermaLink="true">http://wppurking.github.io/2013/09/07/golang-de-zhong-de-windows-dot-go-darwin-dot-go.html</guid>
        
        
      </item>
    
      <item>
        <title>gokogiri 的使用小试</title>
        <description>&lt;h2 id=&quot;section&quot;&gt;介绍&lt;/h2&gt;
&lt;p&gt;因为 Golang 的编译拥有方便部署的特性, 一直想将现在系统中一部分独立抓取业务使用 Golang 编写, 这样编译好以后, 直接扔到系统上就可以运行起来很简单, 可是一直没有找到一个合适的 html 的解析库, 直到后面发现 &lt;a href=&quot;https://github.com/moovweb/gokogiri&quot;&gt;gokogiri&lt;/a&gt; 发现这真是一个很棒的解析库, 依赖 C 库 libxml. 相应的其他的 html parser 工具还有 &lt;a href=&quot;https://github.com/PuerkitoBio/goquery&quot;&gt;goquery&lt;/a&gt; 其依赖 golang 的 go.net/html 库, 因为库成熟度的原因我还是选择了 gokogiri.&lt;/p&gt;

&lt;h2 id=&quot;gokogiri-&quot;&gt;Gokogiri 基本使用&lt;/h2&gt;
&lt;p&gt;比较悲剧的是, gokogiri 项目中介绍使用的文档一点都没有, 很是烦恼所以只能慢慢的阅读他的代码与相关的测试来查看这个库该如何使用. 下面就通过 “抓取 www.google.com 上的所有 a 标签” 为例子来介绍一下使用.&lt;/p&gt;

&lt;h3 id=&quot;gopath&quot;&gt;首先设置好自己的 GOPATH&lt;/h3&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span class=&quot;nb&quot;&gt;cd&lt;/span&gt; ~
mkdir goo
&lt;span class=&quot;nb&quot;&gt;cd &lt;/span&gt;goo
&lt;span class=&quot;nv&quot;&gt;GOPATH&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;~/goo&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;h3 id=&quot;go-get-githubcommoovwebgokogiri&quot;&gt;然后我们需要添加依赖:  &lt;code&gt;go get github.com/moovweb/gokogiri&lt;/code&gt;&lt;/h3&gt;

&lt;h3 id=&quot;section-1&quot;&gt;代码实现&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;main.go&lt;/strong&gt;&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-go&quot; data-lang=&quot;go&quot;&gt;&lt;span class=&quot;k&quot;&gt;package&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;

&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;import&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;
	&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;github.com/moovweb/gokogiri&quot;&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;
	&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;io/ioutil&quot;&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;
	&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;log&quot;&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;
	&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;net/http&quot;&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;

&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;func&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;
	&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;resp&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;err&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:=&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;http&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Get&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;http://www.google.com&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;
	&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;defer&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;resp&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Body&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Close&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;
	&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;handlErr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;err&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;

	&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;html&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;err&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:=&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ioutil&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ReadAll&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;resp&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Body&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;
	&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;handlErr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;err&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;

	&lt;/span&gt;&lt;span class=&quot;c&quot;&gt;// 解析 html 成为 gokogiri 的 Document 对象&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;
	&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;doc&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;err&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:=&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;gokogiri&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ParseHtml&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;html&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;
	&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;handlErr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;err&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;
	&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;defer&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;doc&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Free&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;

    &lt;/span&gt;&lt;span class=&quot;c&quot;&gt;// Search 是 Document 的解析 API, 这里只能填写 XPath&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;
	&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;nodeArr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;err&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:=&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;doc&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Search&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;//a&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;
	&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;handlErr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;err&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;

	&lt;/span&gt;&lt;span class=&quot;c&quot;&gt;// 返回的是 []Node&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;
	&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;for&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;_&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;node&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:=&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;k&quot;&gt;range&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;nodeArr&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;
		&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Println&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;node&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;
	&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;

&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;

&lt;/span&gt;&lt;span class=&quot;c&quot;&gt;// 我发现每写一行代码都要处理下 error ...&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;func&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;handlErr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;err&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;error&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;
	&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;err&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!=&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;no&quot;&gt;nil&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;
		&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Fatalln&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;err&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;
	&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;通过 &lt;code&gt;go run main.go&lt;/code&gt; 即可.&lt;/p&gt;

&lt;h2 id=&quot;gokogiri--css&quot;&gt;Gokogiri 通过 CSS&lt;/h2&gt;
&lt;p&gt;现在 jQuery 在前端非常的流行, 其所带来的 CSS 类似的选择器也大受 Html 解析库的欢迎, 例如 Java 中的 Jsoup, Python 中的 pyquery, Golang 中的 goquery, Ruby 中的 nokogiri 等等, 所以很多时候我也想通过 CSS 的选择器语法来搜索元素. 好的是, gokogiri 提供了通过 CSS 来解析文档的特性, 不好的是这个特性并没有集成进行 &lt;code&gt;Document.Search()&lt;/code&gt; 这个 API 中. 我们将上面的例子修改为通过 CSS 解析.&lt;/p&gt;

&lt;h3 id=&quot;gokogiricss-&quot;&gt;添加 gokogiri/css 所依赖的库:&lt;/h3&gt;
&lt;p&gt;因为 gokogiri 的 css 解析库依赖 &lt;a href=&quot;github.com/moovweb/rubex&quot;&gt;rubex&lt;/a&gt; 并且其还依赖一些另外的库, 所以需要额外安装, 如其 github 仓库所介绍的:&lt;/p&gt;

&lt;p&gt;Mac OS: &lt;code&gt;brew install oniguruma&lt;/code&gt; 
Ubuntu: &lt;code&gt;sudo apt-get install libonig2&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;因为我是 Mac OS 所以就执行了第一行, 如果是 windows 的话, “呵呵”&lt;/p&gt;

&lt;p&gt;安装好以后就可以添加依赖了 &lt;code&gt;go get github.com/moovweb/rubex&lt;/code&gt;&lt;/p&gt;

&lt;h3 id=&quot;section-2&quot;&gt;调整代码&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;main.go&lt;/strong&gt;&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-go&quot; data-lang=&quot;go&quot;&gt;&lt;span class=&quot;k&quot;&gt;package&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;

&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;import&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;
	&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;github.com/moovweb/gokogiri&quot;&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;
	&lt;/span&gt;&lt;span class=&quot;c&quot;&gt;// 区别之一: 引入 gokogiri/css 库&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;
	&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;github.com/moovweb/gokogiri/css&quot;&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;
	&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;io/ioutil&quot;&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;
	&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;log&quot;&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;
	&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;net/http&quot;&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;

&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;func&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;
	&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;resp&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;err&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:=&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;http&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Get&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;http://www.google.com&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;
	&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;defer&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;resp&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Body&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Close&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;
	&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;handlErr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;err&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;

	&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;html&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;err&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:=&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ioutil&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ReadAll&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;resp&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Body&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;
	&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;handlErr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;err&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;

	&lt;/span&gt;&lt;span class=&quot;c&quot;&gt;// 解析 html 成为 gokogiri 的 Document 对象&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;
	&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;doc&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;err&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:=&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;gokogiri&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ParseHtml&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;html&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;
	&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;handlErr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;err&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;
	&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;defer&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;doc&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Free&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;

	&lt;/span&gt;&lt;span class=&quot;c&quot;&gt;// 区别之二: 使用 css 库的 Conver 函数&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;
	&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;nodeArr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;err&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:=&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;doc&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Search&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;css&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Convert&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;a&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;css&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;GLOBAL&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;
	&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;handlErr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;err&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;

	&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;for&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;_&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;node&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:=&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;k&quot;&gt;range&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;nodeArr&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;
		&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Println&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;node&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;
	&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;

&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;

&lt;/span&gt;&lt;span class=&quot;c&quot;&gt;// 我发现每写一行代码都要处理下 error ...&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;func&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;handlErr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;err&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;error&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;
	&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;err&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!=&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;no&quot;&gt;nil&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;
		&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Fatalln&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;err&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;
	&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;通过查看 gokogiri 的 css 包的源码与其测试可以看出, gokorigi 用来支持 CSS 选择器的方式是将 CSS 选择器语法转换成为了 XPath , 而在 &lt;code&gt;Document.Search()&lt;/code&gt; 没有将 css 的语法集成进来很大的原因我测应该是对 css 语法转换为 XPath 语法所额外需要的依赖包的问题.&lt;/p&gt;

</description>
        <pubDate>Fri, 30 Aug 2013 10:39:00 +0800</pubDate>
        <link>http://wppurking.github.io/2013/08/30/gokogiri-de-shi-yong-xiao-shi.html</link>
        <guid isPermaLink="true">http://wppurking.github.io/2013/08/30/gokogiri-de-shi-yong-xiao-shi.html</guid>
        
        
      </item>
    
      <item>
        <title>使用 Golang 编写小应用后的感受</title>
        <description>&lt;h2 id=&quot;section&quot;&gt;起因&lt;/h2&gt;
&lt;p&gt;最近公司里面的人数增多了, 而我们现在为保证公司正常运行的业务所需要的翻墙都在 &lt;a href=&quot;https://github.com/wppurking/wyatt_hosts&quot;&gt;wyatt_host&lt;/a&gt; 这个当中, 而大家似乎都不太会知道如何去替换掉自己系统中的 hosts 文件, 所以决定写一个小应用 &lt;a href=&quot;https://github.com/wppurking/hosts_replacer&quot;&gt;hosts_replacer&lt;/a&gt; 来自动更新系统中的 hosts.&lt;/p&gt;

&lt;p&gt;可是问题就在这里, 大家使用的系统都是 Windows 而我所在的开发环境是 Mac OS, 在我的环境下我可以索性写一个 ruby 脚本很快的解决这个问题, 可是当我写好这个 ruby 脚本让他们使用的时候则会碰到需要到 windows 电脑上安装 ruby 解释器的情况, 这真的会是得不偿失啊, 所以将想到了 Golang 这个可以编译成执行执行的二进制文件语言. 这样我只要写一次, 然后编译一个 exe 文件大家只要下载这个 exe 双击一下就 ok 啦~&lt;/p&gt;

&lt;h2 id=&quot;section-1&quot;&gt;感受&lt;/h2&gt;
&lt;p&gt;在各种 VM 横飞的现在, 一个新的编译语言的出现给我最直接的感觉就是, “部署真是超级简单”.  如果用 Java 我要下载 Java JRE, 如果用 Ruby 我要下载 Ruby 解释器, 如果用 Python 我要下载 Python 解释器, 如果用 JavaScript 我要下载 NodeJS 等等, 当然 C 和 C++ 应该也可以, 可是这两门语言的代码我现在不会写…&lt;/p&gt;

&lt;h3 id=&quot;section-2&quot;&gt;方法的组织&lt;/h3&gt;
&lt;p&gt;在编写这个小应用的时候, 抛开核心库语言特性等等不说, Golang 中对功能代码的组织方式的确是让我感觉非常新奇的一个地方, 以前在看别人的 Golang 代码的时候发现, 为什么大家都是在一个文件中所有方法都从文件的最左边开始, 没有一点缩进的呢? 因为我们常用的 Class 模型去编写代码至少都会有一个 class 关键字加上一个大括号或者缩进来将方法归到这一个 Class 中. 也正是因为这样我就在想, 我们现在都是通过类, 通过包, 或者命令空间来组织方法, 将方法归类到一起, 而在 Golang 中, 我可以随意的通过目录, 文件来将方法物理的归类到一起, 但是在内存中呢? 我却可以夸文件的调用方法, 就像&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-go&quot; data-lang=&quot;go&quot;&gt;&lt;span class=&quot;c&quot;&gt;// 我可以&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;strings&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Replace&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;abc&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;a&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;99&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;c&quot;&gt;// 也可以&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;strings&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Split&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;a,b,c,d&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;,&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;但你通过 &lt;code&gt;godoc -http=:8080&lt;/code&gt; 启动 golang 文档, 并且访问到 &lt;a href=&quot;http://0.0.0.0:8080/pkg/strings/#pkg-examples&quot;&gt;Package files&lt;/a&gt; 会发现, &lt;code&gt;Replace&lt;/code&gt; 方法是在 replace.go 文件中, &lt;code&gt;Split&lt;/code&gt; 方法是在 &lt;code&gt;strings.go&lt;/code&gt; 文件中. 突然想到 ruby 也可以通过 open class 的形式来达到这样的效果, 只是 Golang 让这种组织方法的方式很自然. 我不知道常规意义上使用 class 来组织方法的方式和 Golang 这种方式谁好, 不过 Golang 的这种物理组织方式与内存中组织方式的混合对我感觉的确挺新鲜的.&lt;/p&gt;

&lt;h3 id=&quot;section-3&quot;&gt;编译器超严格&lt;/h3&gt;
&lt;p&gt;我从没看到哪个编译器会对没有使用过的变量或者引入包进行编译器报错的, 也是第一次看到 Golang 的编译器竟然在编译代码的时候告诉我有一个地方存在死循环的问题 O_o&lt;/p&gt;

&lt;p&gt;这个严格的编译器导致我在使用 “fmt” 输出信息查看代码运行的时候, 我总得在 import “fmt” 和注释掉 import “fmt” 之间来回切换. 也使得我有时候写完一次代码一编译发现给我一下提示了 5, 6 个错误, 让我慢慢改 - -||&lt;/p&gt;

&lt;p&gt;由于这强悍的编译器, 所以在 golang 中类型之间的转换也是相当的严格. 最常见的情况是, 想将某些变量转换为 string 类型输出. 在 ruby 中我们可以 &lt;code&gt;&quot;abc&quot; + 123.to_s&lt;/code&gt; , 在 Java 中有自动调用 &lt;code&gt;toString()&lt;/code&gt; 所以可以 &lt;code&gt;&quot;abc&quot; + 123&lt;/code&gt;, 而在 Golang 中则需要借助 “strconv” 这个 lib 来完成 - -|| 代码一下就多了,&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-go&quot; data-lang=&quot;go&quot;&gt;&lt;span class=&quot;c&quot;&gt;// 伪代码&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;import&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;strconv&quot;&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:=&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;m&quot;&gt;123&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;abc&quot;&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;strconv&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Iota&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;我只感觉在 Golang 中不同类型向 string 的转换相当麻烦, 不过按照类型系统来看的话, int (其他类型) 和 string 是两个完全不同的类型, 不同类戏之间使用 &lt;code&gt;+&lt;/code&gt; 或者强制转换就算有, 也的确应该需要足够严格才好.&lt;/p&gt;

&lt;p&gt;最后我只想说, 这个编译器很尽责.&lt;/p&gt;

&lt;h3 id=&quot;section-4&quot;&gt;基础工具超实用&lt;/h3&gt;
&lt;p&gt;对代码格式, 我现在团队里面都是统一使用一个 IDEA 的 settings.jar 配置, 然后统一使用 IDEA 提供的代码格式化来处理. 在 Golang 中, 直接为我们提供了 &lt;code&gt;gofmt -w .&lt;/code&gt; 然后我当前目录以及子目录中的所有 .go 文件全部按照一个统一格式处理好了. 这个工具很直接, 很简单!&lt;/p&gt;

&lt;p&gt;我不知道是不是 *nix 的影响, 现在的依赖管理基本上都会是一个统一类似的概念, 通过某个命令自动到一个中心或者可配置的中心仓库去寻找所需要的库, 例如 java 的 maven, ruby 的 rubygem, python 的 easy_install ,这里 golang 则有一个 &lt;code&gt;go get&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Golang 提供的这些工具, 使用起来都是很直接, 很简单, 不用太多想法.&lt;/p&gt;

&lt;h2 id=&quot;section-5&quot;&gt;最后&lt;/h2&gt;
&lt;p&gt;总的来说 Golang 还是一门不错的语言啦, 至少对我最大的吸引在于他是编译的, 同时语法真的是相当相当的简单了. 类型系统(12 个类型), 程序语句(if, for, go, select..), Error 处理, 包处理 然后, 然后就差不多了吧 ^_^&lt;/p&gt;

</description>
        <pubDate>Sat, 10 Aug 2013 22:59:00 +0800</pubDate>
        <link>http://wppurking.github.io/2013/08/10/shi-yong-golang-bian-xie-xiao-ying-yong-hou-de-gan-shou.html</link>
        <guid isPermaLink="true">http://wppurking.github.io/2013/08/10/shi-yong-golang-bian-xie-xiao-ying-yong-hou-de-gan-shou.html</guid>
        
        
      </item>
    
      <item>
        <title>利用 EventMachine 和 Fiber 实现 Socks 5 代理(2)</title>
        <description>&lt;p&gt;前面已经将一些理论上的内容讲解了, 这一篇则是将自己实现这个本地 Socks 代理的过程给记录下来.&lt;/p&gt;

&lt;h2 id=&quot;em-server&quot;&gt;启动这个 EM Server&lt;/h2&gt;
&lt;p&gt;首先我们需要利用 EventMachine(EM) 启动一个本地的 Server 用来监听进来的连接. 我们可以选择 Proc/Module/Class 来实现, 因为是一个 LocalServer 并且不需要每一次都实例化这个 LocalServer, 所以就没理由的选择使用 Module 来实现了, 虽然 Modlue 在 ruby 也就是一个 Class, 少写几行代码, 哈哈.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;local.rb&lt;/strong&gt;&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span class=&quot;nb&quot;&gt;require&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;eventmachine&quot;&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;module&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;LocalServer&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;post_init&lt;/span&gt;
        &lt;span class=&quot;vi&quot;&gt;@data&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&#39;&#39;&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;receive_data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;unbind&lt;/span&gt;
        &lt;span class=&quot;nb&quot;&gt;puts&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&#39;connection is closing...&#39;&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;stop&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;no&quot;&gt;EM&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;stop&lt;/span&gt;
    &lt;span class=&quot;nb&quot;&gt;puts&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&#39;Server Stop..&#39;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;no&quot;&gt;EM&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;run&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;# 关于 linux 信号: http://rdc.taobao.com/blog/cs/?p=1540&lt;/span&gt;
    &lt;span class=&quot;nb&quot;&gt;trap&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:SIGINT&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;stop&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;nb&quot;&gt;trap&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:SIGTERM&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;stop&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;nb&quot;&gt;trap&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:SIGKILL&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;stop&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

    &lt;span class=&quot;n&quot;&gt;addr&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;0.0.0.0&quot;&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;port&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1080&lt;/span&gt;
    &lt;span class=&quot;nb&quot;&gt;puts&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;Server listen at &lt;/span&gt;&lt;span class=&quot;si&quot;&gt;#{&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;addr&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;#{&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;port&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;
    &lt;span class=&quot;no&quot;&gt;EM&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;start_server&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;addr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;port&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;LocalServer&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;这时, 我们能够通过 &lt;code&gt;ruby local.rb&lt;/code&gt; 启动这个 Server 了.&lt;/p&gt;

&lt;h2 id=&quot;socks-&quot;&gt;Socks 协议&lt;/h2&gt;
&lt;p&gt;这里有两个文档需要详细阅读:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;&lt;a href=&quot;http://tools.ietf.org/html/rfc1928&quot;&gt;rfc1928&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://en.wikipedia.org/wiki/SOCKS&quot;&gt;Socks wiki&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;h3 id=&quot;socks5--&quot;&gt;这两个文档中详细记录 Socks5 协议需要处理的内容, 下面我把他简化一下&lt;/h3&gt;

&lt;ol&gt;
  &lt;li&gt;客户端向服务器发起建立 Socks 代理的请求&lt;/li&gt;
  &lt;li&gt;服务器响应 Socks 代理请求, 并且告诉客户端是否支持这次代理请求 (greeting)&lt;/li&gt;
  &lt;li&gt;客户端向服务器发起这次代理请求的详细内容, 例如需要访问的 domain 或者 ip 地址, 如果需要验证用户, 还有验证用的账户密码信息等等&lt;/li&gt;
  &lt;li&gt;服务器响应客户端发送过来的详细内容, 处理用户验证或者根据客户端的 domain 或 ip 地址将请求进行代理请求.&lt;/li&gt;
  &lt;li&gt;通过 Socks 服务器建立好请求后, 客户端通过 Socks 通道与目标服务器之间信息来往发送,接收与连接关闭等&lt;/li&gt;
&lt;/ol&gt;

&lt;h3 id=&quot;socks--gretting&quot;&gt;客户端 Socks 请求与服务端的 gretting&lt;/h3&gt;
&lt;blockquote&gt;
  &lt;p&gt;The client connects to the server, and sends a version identifier/method selection message&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;对于 Socks 的启动由 Client 触发, 首先由其发送一条确认 Socks 版本/方法等等的 greeting 消息, 从上篇内容中了解, 我们可以通过 Fiber 结合 EM 来实现对于数据的异步获取&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;receive_data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;nb&quot;&gt;p&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;data&lt;/span&gt;
    &lt;span class=&quot;vi&quot;&gt;@data&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;data&lt;/span&gt;
    &lt;span class=&quot;vi&quot;&gt;@fiber&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;resume&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;wait&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;n&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;no&quot;&gt;Fiber&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;yield&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;not&lt;/span&gt; &lt;span class=&quot;vi&quot;&gt;@data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;size&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;n&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;在 &lt;code&gt;receive_data&lt;/code&gt; 中接收数据, 然后重新启动 fiber, 同时定义一个 &lt;code&gt;wait&lt;/code&gt; 方法, 用于判断是否让 Fiber 停留在接收数据阶段, 看到上面的 &lt;code&gt;@fiber&lt;/code&gt; 你肯定也会猜到, 它应该在 &lt;code&gt;post_init&lt;/code&gt; 中初始化. 我们如何测试我们正在编写的 LocalServer 处理的二进制数据正确? 我需要一个实际使用 Socks 代理的应用来发送请求. 对于这个可以使用 Chrome 的 Proxy 插件, 也可以使用 Mac OS 的系统代理. 我设置了 Mac OS 中的系统代理为 Socks, 然后用 Safari 浏览器来访问互联网来查看实际情况下的 Socks greeting 信息.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;wyatt em_tunnel&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;ruby local2.rb
Server listen at 0.0.0.0:1080
&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\x&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;05&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\x&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;01&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\x&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;00&quot;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;我们看到总共三个字节, 与 rfc1928 中记录的一样, 第一个字节代表 Version, 第二个字节代表选择的 Methods 会拥有的长度, 第三个字节(最长 255 个字节)表示可选的方法. 根据协议可知道, 这个请求的 greeting 最少应该拥有 3 个 bytes, 所以在 Fiber 中先最少读取 3 个字节的内容再进行处理.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;post_init&lt;/span&gt;
    &lt;span class=&quot;vi&quot;&gt;@data&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&#39;&#39;&lt;/span&gt;
    &lt;span class=&quot;vi&quot;&gt;@fiber&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Fiber&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;greeting&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;greeting&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;wait&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;将第一次需要读取 3 bytes 的数据放入 greeting 方法中, 是因为用这个方法来处理 Server 与 Socks Client 第一次交互的所有内容.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;greeting&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;wait&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;ver&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;nmethod&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;vi&quot;&gt;@data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;unpack&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&#39;C2&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ver&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt;
       &lt;span class=&quot;n&quot;&gt;send_data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\x05\xFF&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
       &lt;span class=&quot;n&quot;&gt;close_connection&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
    
    &lt;span class=&quot;c1&quot;&gt;# 中间的数据不要了&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;send_data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\x05\x00&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;vi&quot;&gt;@data&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&#39;&#39;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;仅仅让 greeting 对传递进来的消息做了是否为 Socks 5 协议的判断, 如果不是 Socks 5 协议则直接返回不接受并且 &lt;code&gt;close_connection&lt;/code&gt;, 否则就全部通过返回 VER: \x05 表示 Socks 5 协议与 METHOD: \X00 表示 “NO AUTHENTICATION REQUIRED” 两个字节并且等着客户端发送新的信息过来.&lt;/p&gt;

&lt;p&gt;现在, 我借用 Mac OS 的系统 Socks 代理与 Safir 看到了 Socks 的第一步 “客户端发起建立 Socks 代理的请求” 与利用 EM 编写的 “服务器响应 Socks 代理请求, 并且告诉客户端是否支持这次代理请求” 这两个步骤, 接下来还有三个步骤将会在后续的文章中详解.&lt;/p&gt;

&lt;h2 id=&quot;section&quot;&gt;其他&lt;/h2&gt;
&lt;p&gt;当我将这个小例子项目写完以后, 也让我对利用 Socket 编程和与底层的协议相关的编程内容有了新的理解. 让我理解到 Socket 通信在现在经常编写的 Web 应用所使用的 HTTP 协议外还有很多其他的协议, 而他们之间的通信都是建立在 Socket 通信这个基础之上的, 这也让我理解了为什么说 beanstalkd 的协议很简单, 为什么 redis 通信很简单, 让我直接体会到了使用 &lt;code&gt;nc -C 0.0.0.0 11300&lt;/code&gt; 连接 beanstalkd 直接和他通信是在发生些什么.&lt;/p&gt;
</description>
        <pubDate>Mon, 15 Jul 2013 22:23:00 +0800</pubDate>
        <link>http://wppurking.github.io/2013/07/15/li-yong-eventmachine-he-fiber-shi-xian-socks-5-dai-li-2.html</link>
        <guid isPermaLink="true">http://wppurking.github.io/2013/07/15/li-yong-eventmachine-he-fiber-shi-xian-socks-5-dai-li-2.html</guid>
        
        
      </item>
    
      <item>
        <title>利用 EventMachine 和 Fiber 实现 Socks 5 代理(1)</title>
        <description>&lt;h2 id=&quot;section&quot;&gt;起因&lt;/h2&gt;
&lt;p&gt;最近看到 &lt;a href=&quot;https://github.com/clowwindy/shadowsocks&quot;&gt;Shadowsocks&lt;/a&gt; 这个项目, 发现他其实挺火的, 当然这个项目是用来科学上网用的, 核心就是通过 Socks 代理来达到翻墙的目的, 当然代理中间还做了一些混淆处理, 核心部分有:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;用于提供本地 Socks 代理的本地代理客户端&lt;/li&gt;
  &lt;li&gt;用于处理客户端代理请求的远端代理服务器&lt;/li&gt;
  &lt;li&gt;在本地代理服务器与远端服务器之间的加密&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;以前了解 GoAgent 等等其他科学上网的工具, 都发现很复杂, 但了解这个工具后发现很好用很简单, 以至于 &lt;a href=&quot;https://github.com/clowwindy/shadowsocks-nodejs&quot;&gt;Node.js 版本&lt;/a&gt;, &lt;a href=&quot;https://github.com/shadowsocks/shadowsocks-go&quot;&gt;Golang 版本&lt;/a&gt;, &lt;a href=&quot;https://github.com/clowwindy/shadowsocks-ruby&quot;&gt;Ruby 版本&lt;/a&gt; 都层出不穷, 正好看到了 &lt;a href=&quot;https://github.com/luikore/stochastic-socks&quot;&gt;stochastic-socks&lt;/a&gt; 这个项目所以就想实现一下学习一个 Ruby 中的 Fiber 和 EventMachine.&lt;/p&gt;

&lt;h2 id=&quot;section-1&quot;&gt;目的&lt;/h2&gt;
&lt;p&gt;这个项目的目的是为了学习如何使用 Ruby 中的 Fiber 与 EventMachine 所以现已实现客户端为主要方向.&lt;/p&gt;

&lt;h2 id=&quot;em-&quot;&gt;认识基本的 EM 知识&lt;/h2&gt;

&lt;h3 id=&quot;em--client&quot;&gt;EM 作为 Client&lt;/h3&gt;
&lt;p&gt;在接触 EventMachine (后称 EM) 的时候, 第一个例子一般都是教你如何将 EM 启动起来, 然后能够让其接受外部请求过来的 Socket 连接, 注意是 Socket 连接不是 Socks 哈. 首先阅读 &lt;a href=&quot;https://github.com/eventmachine/eventmachine/wiki/General-Introduction&quot;&gt;General Introduction&lt;/a&gt; 发现, EM 可以让我们通过 Block/Proc, Module, Class 三种方式来编写自己的代码来插入到 &lt;code&gt;EM.run&lt;/code&gt; 提供的 Event Loop 中. 我现在还不了解提供这三种方式的目的是什么, 不过我现在仅仅把他理解成三种方式根据不同的情景选择. 为了测试我们的 EM 发出了一个 Socket 连接, 我们先借助 &lt;code&gt;nc -l 1080&lt;/code&gt; 来简单的查看效果, 每测试一次都需要启动一次(我没找到可以持续监听的参数 - -||) 然后可以分别测试下面的代码:&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;proc.rb&lt;/strong&gt;&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span class=&quot;nb&quot;&gt;require&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;eventmachine&quot;&lt;/span&gt;

&lt;span class=&quot;nb&quot;&gt;proc&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;c&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;c&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;post_init&lt;/span&gt;
        &lt;span class=&quot;nb&quot;&gt;p&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&#39;post init&#39;&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;c&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;connection_completed&lt;/span&gt;
        &lt;span class=&quot;nb&quot;&gt;p&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&#39;connection complete&#39;&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;send_data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;hahahahah&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\n&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;nb&quot;&gt;p&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&#39;send data&#39;&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;close_connection_after_writing&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;


    &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;c&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;receive_data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;nb&quot;&gt;p&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&#39;对方没有发送信息, 所以不会触发 Event 不会调用显示&#39;&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;c&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;unbind&lt;/span&gt;
        &lt;span class=&quot;nb&quot;&gt;p&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&#39;unbind&#39;&lt;/span&gt;
        &lt;span class=&quot;no&quot;&gt;EM&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;stop&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;no&quot;&gt;EM&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;run&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt;
    &lt;span class=&quot;no&quot;&gt;EM&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;connect&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&#39;127.0.0.1&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1080&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;proc&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;&lt;strong&gt;module.rb&lt;/strong&gt;&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span class=&quot;k&quot;&gt;module&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;Client&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;post_init&lt;/span&gt;
        &lt;span class=&quot;nb&quot;&gt;p&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&#39;post init&#39;&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;connection_completed&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;send_data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;hahahahah&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\n&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;close_connection_after_writing&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;receive_data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;nb&quot;&gt;p&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&#39;won`t trigger&#39;&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;unbind&lt;/span&gt;
        &lt;span class=&quot;nb&quot;&gt;p&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&#39;unbind&#39;&lt;/span&gt;
        &lt;span class=&quot;no&quot;&gt;EM&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;stop&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

&lt;span class=&quot;no&quot;&gt;EM&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;run&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt;
    &lt;span class=&quot;no&quot;&gt;EM&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;connect&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&#39;127.0.0.1&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1080&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Client&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;&lt;strong&gt;class.rb&lt;/strong&gt;&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Clt&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;EM&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;Connection&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;initialize&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;args&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;nb&quot;&gt;p&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&#39;class init&#39;&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;post_init&lt;/span&gt;
        &lt;span class=&quot;nb&quot;&gt;p&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&#39;post init&#39;&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;connection_completed&lt;/span&gt; 
        &lt;span class=&quot;nb&quot;&gt;p&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&#39;connection complete&#39;&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;send_data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;hahahahah&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\n&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;nb&quot;&gt;p&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&#39;send data&#39;&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;close_connection_after_writing&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;receive_data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;nb&quot;&gt;p&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&#39;won`t trigger&#39;&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;unbind&lt;/span&gt;
        &lt;span class=&quot;nb&quot;&gt;p&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&#39;unbind&#39;&lt;/span&gt;
        &lt;span class=&quot;no&quot;&gt;EM&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;stop&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

&lt;span class=&quot;no&quot;&gt;EM&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;run&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt;
    &lt;span class=&quot;no&quot;&gt;EM&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;connect&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&#39;127.0.0.1&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1080&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Clt&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;如果执行正确, 开启了 &lt;code&gt;nc -l 1080&lt;/code&gt; 的命令行会出现 &lt;code&gt;hahahahah&lt;/code&gt; 的字符串, 表示成功将信息传给了 nc 监听的那个 Socket 中, 而同时在执行这几个 ruby 脚本的命令行中也会出现一些字符串, 代表 EM 作为 Client 去建立 Socket Connection 的时候的状态变化, Proc/Module/Class 出现的内容会有一些不一样, 为什么不一样不是这里的重点所以就不细究了, 但是这里的几个方法还是需要理解一下, 这些方法都可以到 &lt;a href=&quot;http://rubydoc.info/github/eventmachine/eventmachine/frames&quot;&gt;Rdoc&lt;/a&gt; 中找到:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;code&gt;post_init&lt;/code&gt; : Called by the event loop immediately after the network connection has been established. 可以理解为 EM 建立的 Connection 的生命周期的开始.&lt;/li&gt;
  &lt;li&gt;&lt;code&gt;connection_completed&lt;/code&gt; : Called by the event loop when a remote TCP connection attempt completes successfully. 当 Connection 成功建立的时候触发, 如果没有建立成功则触发 unbind.&lt;/li&gt;
  &lt;li&gt;&lt;code&gt;receive_data&lt;/code&gt; : Called by the event loop whenever data has been received by the network connection. 接收 Socket 中传输过来的数据, 但并不是一次就可以接收完毕的, 所以会很容易在此方法中看到类似 &lt;code&gt;@data += data&lt;/code&gt; 这样的代码, EM 在不断接收到数据后触发此方法, 而此方法不断将接收到的数据存储起来, 直到全部数据传输完成.&lt;/li&gt;
  &lt;li&gt;&lt;code&gt;unbind&lt;/code&gt; : Called by the framework whenever a connection (either a server or client connection) is closed. 当 Socket 之间的连接断开的时候触发.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;理解 EM 创建的 Socket 的 Connection 的生命周期很重要, 因为你每一个请求都会经过上面的某几个阶段, 你的代码也会在其中的某几个阶段中进行插入. 在这里, 也了解到了 EM 作为 Client 向一个服务器发起一个 Socket 连接并进行信息传输是如何操作的. 可以尝试修改一下看如何让在 nc 所在的命令行中输入内容, 而 EM 中能够通过 &lt;code&gt;receive_data(data)&lt;/code&gt; 来获取到数据.&lt;/p&gt;

&lt;h3 id=&quot;em--server&quot;&gt;EM 作为 Server&lt;/h3&gt;
&lt;p&gt;想让 EM 作为 Server 端来监听某个端口, 其实很简单, 将上面调用的 &lt;code&gt;EM.connect&lt;/code&gt; 更换为 &lt;code&gt;EM.start_server&lt;/code&gt; 就可以了, 因为无论 Client 还是 Server 他们都是在操作一个一个的 Socket Connection, 所以 Connection 的 lifecyle 还是类似的, 只是在 Connection 中相关的处理逻辑不一样了.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span class=&quot;no&quot;&gt;EM&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;connect&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&#39;127.0.0.1&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1080&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Client&lt;/span&gt;
&lt;span class=&quot;no&quot;&gt;EM&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;start_server&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&#39;127.0.0.1&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1080&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Client&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;抄一个简单的 Echo Server
&lt;strong&gt;echo.rb&lt;/strong&gt;&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span class=&quot;nb&quot;&gt;require&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;eventmachine&quot;&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;module&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;Server&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;post_init&lt;/span&gt;
        &lt;span class=&quot;nb&quot;&gt;p&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&#39;post init&#39;&lt;/span&gt;
        &lt;span class=&quot;vi&quot;&gt;@data&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&#39;&#39;&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;connection_completed&lt;/span&gt;
        &lt;span class=&quot;nb&quot;&gt;p&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&#39;connection_completed&#39;&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;receive_data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;vi&quot;&gt;@data&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;data&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;send_data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;unbind&lt;/span&gt;
        &lt;span class=&quot;nb&quot;&gt;p&lt;/span&gt; &lt;span class=&quot;vi&quot;&gt;@data&lt;/span&gt;
        &lt;span class=&quot;nb&quot;&gt;p&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&#39;unbind&#39;&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

&lt;span class=&quot;no&quot;&gt;EM&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;run&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt;
    &lt;span class=&quot;no&quot;&gt;EM&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;start_server&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&#39;0.0.0.0&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1080&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Server&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;在一个命令行中运行这个 Server, 然后在另外一个命令行中通过 &lt;code&gt;nc 127.0.0.1 1080&lt;/code&gt; 就可以交互了, 当 &lt;code&gt;CTRL + C&lt;/code&gt; 关闭连接中的 nc 时, Server 会将所有接收到的信息在关闭连接触发 &lt;code&gt;unbind&lt;/code&gt; 后全部传输给客户端.&lt;/p&gt;

&lt;h2 id=&quot;em--receivedata--fiber-&quot;&gt;EM 中 receive_data 与 Fiber 的思考&lt;/h2&gt;

&lt;h3 id=&quot;receivedata-&quot;&gt;receive_data 与协议解析&lt;/h3&gt;
&lt;p&gt;通过阅读 EM 中关于 &lt;a href=&quot;http://rubydoc.info/github/eventmachine/eventmachine/EventMachine/Connection#receive_data-instance_method&quot;&gt;receive_data 部分的文档&lt;/a&gt;, 因为 EM 在一个 Event Loop 中, &lt;code&gt;receive_data&lt;/code&gt; 方法中接收到的数据与其触发一个 Event 被调用的时机是不固定的,&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Depending on the protocol, buffer sizes and OS networking stack configuration, incoming data may or may not be “a complete message”&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;所以我们需要想办法去处理如何拿到一次请求中我们所需要的所有数据, 举个极端点的例子: 对方发送过来一串 “hello, world!” 字符串信息, 在 Socket Connection 中传输的是这穿字符串的二进制数据 bytes ,而 Socket Connection 是不会知道这些 bytes 哪些部分是开始哪些部分是结束(通过 TCP 协议传输而数据重传不讨论), 所以对于在 &lt;code&gt;receive_data&lt;/code&gt; 中的处理, 需要我们对这部分内容进行处理, 可以看到使用 EM 的 &lt;a href=&quot;https://github.com/macournoyer/thin/blob/master/lib/thin/request.rb#L75&quot;&gt;thin 也逃不过这点&lt;/a&gt; (thin 将 HTTP 的详细解析封装到 C 中去了).&lt;/p&gt;

&lt;p&gt;想想, 如果我们要来判断不断接收到的 chunk 数据, 什么时候全部到达该如何做? 我们需要对接收到的数据进行解析, 然后根据获取到的数据一步一步的向后解析, 直到整个解析步骤完成. 例如: HTTP 协议.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;GET /index.html HTTP/1.1&lt;span class=&quot;se&quot;&gt;\r\n&lt;/span&gt;
Accept-Encoding: gzip,deflate,sdch&lt;span class=&quot;se&quot;&gt;\r\n&lt;/span&gt;
Host:www.google.com&lt;span class=&quot;se&quot;&gt;\r\n&lt;/span&gt;
&lt;span class=&quot;se&quot;&gt;\r\n&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;ol&gt;
  &lt;li&gt;我们需要找到第一个 &lt;code&gt;\r\n&lt;/code&gt; 结束才能知道这个 HTTP 请求的 verbose 是 GET, 请求的 path 是 /index.html 使用的 HTTP 协议是 1.1 .&lt;/li&gt;
  &lt;li&gt;接着继续获取数据, 后续每解析盗一个 &lt;code&gt;\r\n&lt;/code&gt; 就作为 HTTP 的 Header&lt;/li&gt;
  &lt;li&gt;直到解析到一个以 &lt;code&gt;\r\n&lt;/code&gt; 开头的并且只有这些数据的空行完成 HTTP GET 的请求.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;HTTP 解析还有很多复杂的细节, 但具体的解析会很类似, 都是处于 “接收数据” -&amp;gt; “解析” 这样的循环中, 这个循环可以很大, 通过 “接收数据” 直到所有数据接收完毕再进行 “解析”, 也可以很小, 在 “接收数据” 到合适的数据就开始这一部分的 “解析” 然后循环直到所有数据解析完毕.&lt;/p&gt;

&lt;h3 id=&quot;socks-5-&quot;&gt;Socks 5 协议&lt;/h3&gt;
&lt;p&gt;OK, 了解这些后回到要编写的这个应用中, 我们需要通过 Socks 5 协议来构建这个本地的代理服务器. 为什么是 Socks 5 协议呢? 说实话, 因为前面介绍的 Shadowsocks 选择的这个, 呵呵. 不过我想使用这个协议也是因为其&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;比较底层, 通过 Socks 与代理服务器建立一个连接, 然后其中传输的是 bytes 与上层协议无关&lt;/li&gt;
  &lt;li&gt;实现简单, 了解 Socks 协议之后, 如果仅支持 Socks 5 而且不需要验证啥的, 两个来回就可以建立连接&lt;/li&gt;
  &lt;li&gt;应用广泛, 无论是操作系统还是应用都有对其的支持, 例如 QQ 中的 Socks 代理, linux 的 &lt;code&gt;ss&lt;/code&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;为了让本地服务器能够支持 Socks 5 协议, 那么 &lt;a href=&quot;http://tools.ietf.org/html/rfc1928&quot;&gt;rfc1928&lt;/a&gt; 是必不可少的文档了, 简化一点的 &lt;a href=&quot;http://en.wikipedia.org/wiki/SOCKS#SOCKS5&quot;&gt;Socks Wiki&lt;/a&gt; 这些文档得多谢&lt;a href=&quot;https://github.com/luikore/stochastic-socks/blob/master/local.rb#L3&quot;&gt;这里&lt;/a&gt;
再简化一下&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;客户端连接到 Socks 服务器, 说 hello~ (greeting)&lt;/li&gt;
  &lt;li&gt;服务器响应是否可以建立 Socks&lt;/li&gt;
  &lt;li&gt;客户端将需要建立的 Socks 的详细信息提交给服务器, 例如验证啊, Socks 协议信息啊&lt;/li&gt;
  &lt;li&gt;服务器处理后告诉客户端是否建立成功&lt;/li&gt;
  &lt;li&gt;接下来这个连接建立好以后, 双方任意传输数据直到连接断开. 断开后重连回到第一步重新开始.&lt;/li&gt;
&lt;/ol&gt;

&lt;h3 id=&quot;fiber&quot;&gt;Fiber&lt;/h3&gt;
&lt;p&gt;在想到上面对 HTTP 协议解析的例子与看到 &lt;a href=&quot;https://github.com/luikore/stochastic-socks&quot;&gt;stochastic-socks&lt;/a&gt; 的例子后, 感觉用 Fiber 来处理这样的情景太合适了, 整个处理过程可以由我们来控制什么时候暂停一下, 什么时候继续, 在接收到合适数据之前我都不断将代码控制权交出去, 直到得到足够我解析请求的数据后进行解析, 多么合适.&lt;/p&gt;

&lt;p&gt;通过查看 Ruby Fiber 的 API 文档, 其拥有的方法数量非常少仅仅只有&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Fiber.yield : 将 Fiber 将代码执行的控制权释放出去&lt;/li&gt;
  &lt;li&gt;Fiber.alive? : 当前 Fiber 是否还可以继续执行, 是否还活着&lt;/li&gt;
  &lt;li&gt;Fiber.resume : 开始执行 Fiber 或者从上次 yield 的地方重新开始执行 Fiber&lt;/li&gt;
  &lt;li&gt;Fiber.current : 返回当前环境下的 Fiber 实例&lt;/li&gt;
  &lt;li&gt;Fiber.transfer : 切换到当前 fiber 执行&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;最经常使用的应该就是 Fiber.yield 与 Fiber.resume 了.&lt;/p&gt;

&lt;p&gt;前面了解 &lt;code&gt;receive_data&lt;/code&gt; 方法是在不断的接收数据, 为了让程序达到 “得到必要的数据之后再继续解析” 这么一个目的, 那我们就让一个 Fiber 中有这么一个过程, 让其接收按照某一个条件接收数据, 如果满足这个条件则通过这个阶段, 否则一直让 Fiber.yield 不让其通过这个阶段, 类似的代码为&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;some_stage&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;block&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;not&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;block&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;call&lt;/span&gt;
        &lt;span class=&quot;nb&quot;&gt;puts&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&#39;retry...&#39;&lt;/span&gt;
        &lt;span class=&quot;no&quot;&gt;Fiber&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;yield&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt;
        &lt;span class=&quot;nb&quot;&gt;puts&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&#39;passed&#39;&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;table&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;这里将判断是否允许通过的方法提取为一个 block 由外部传递进去, 这个相对于 HTTP 协议会比较合适, 因为其特别复杂 - -&lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
      &lt;td&gt;对 Socks 协议, 我觉得 stochastic-socks 中的 &lt;code&gt;wait&lt;/code&gt; 方法会相当合适, 因为在我们当前这个应用中, 需要解析的数据只是那么几个 bytes, 非常简单, 所以方法简化为&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;wait&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;n&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;no&quot;&gt;Fiber&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;yield&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;not&lt;/span&gt; &lt;span class=&quot;vi&quot;&gt;@data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;size&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;n&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;等待 &lt;code&gt;@data&lt;/code&gt; 中的数据, 拥有 n bytes 以上则满足, 否则一直 Fiber.yield 让 EM 去接收数据.&lt;/p&gt;

&lt;p&gt;这一篇, 基本上是在叙述偏理论的东西, 这些内容理解后, 下一偏进行实际代码编写的过程中会轻松一些. 现在我们可以再回想一下几个问题:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;EM 中 Connection 的 life cyle 中有哪些事件会发生, 如何将代码插入到这些入口点中?&lt;/li&gt;
  &lt;li&gt;在 EM 的 &lt;code&gt;receive_data&lt;/code&gt; 中, 可以通过什么方法得到收集完整数据?&lt;/li&gt;
  &lt;li&gt;通过 Socket 接收数据解析协议如何处理?&lt;/li&gt;
  &lt;li&gt;Fiber 在 &lt;code&gt;receive_data&lt;/code&gt; 中的应用&lt;/li&gt;
&lt;/ol&gt;
</description>
        <pubDate>Fri, 12 Jul 2013 22:26:00 +0800</pubDate>
        <link>http://wppurking.github.io/2013/07/12/li-yong-fiber-shi-xian-socks-5-dai-li.html</link>
        <guid isPermaLink="true">http://wppurking.github.io/2013/07/12/li-yong-fiber-shi-xian-socks-5-dai-li.html</guid>
        
        
      </item>
    
  </channel>
</rss>
